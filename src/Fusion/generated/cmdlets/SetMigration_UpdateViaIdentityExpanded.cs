// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6282, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Wandisco.Fusion.Cmdlets
{
    using static Wandisco.Fusion.Runtime.Extensions;

    /// <summary>Start a migration</summary>
    /// <remarks>
    /// [OpenAPI] Migrations_CreateOrUpdate=>PUT:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Wandisco.Fusion/fusionGroups/{fusionGroupName}/replicationRules/{replicationRuleName}/migrations/{migrationName}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.Set, @"Migration_UpdateViaIdentityExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Wandisco.Fusion.Models.Api20190901Preview.IMigration))]
    [global::Wandisco.Fusion.Description(@"Start a migration")]
    [global::Wandisco.Fusion.Generated]
    public partial class SetMigration_UpdateViaIdentityExpanded : global::System.Management.Automation.PSCmdlet,
        Wandisco.Fusion.Runtime.IEventListener
    {
        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Wandisco.Fusion.WanDiscoFusion Client => Wandisco.Fusion.Module.Instance.ClientAPI;

        /// <summary>
        /// Date after which migration should occur. Required if overwritePolicy is SkipIfDateIsEarlier.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Date after which migration should occur. Required if overwritePolicy is SkipIfDateIsEarlier.")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Date after which migration should occur. Required if overwritePolicy is SkipIfDateIsEarlier.",
        SerializedName = @"dateAfterWhichToMigrate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime DateAfterWhichToMigrate { get => MigrationBody.DateAfterWhichToMigrate ?? default(global::System.DateTime); set => MigrationBody.DateAfterWhichToMigrate = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Runtime)]
        public Wandisco.Fusion.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Runtime)]
        public Wandisco.Fusion.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Backing field for <see cref="InputObject" /> property.</summary>
        private Wandisco.Fusion.Models.IWanDiscoFusionIdentity _inputObject;

        /// <summary>Identity Parameter</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Identity Parameter", ValueFromPipeline = true)]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Path)]
        public Wandisco.Fusion.Models.IWanDiscoFusionIdentity InputObject { get => this._inputObject; set => this._inputObject = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Wandisco.Fusion.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Wandisco.Fusion.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>Backing field for <see cref="MigrationBody" /> property.</summary>
        private Wandisco.Fusion.Models.Api20190901Preview.IMigration _migrationBody= new Wandisco.Fusion.Models.Api20190901Preview.Migration();

        /// <summary>Instance of a fusion migration</summary>
        private Wandisco.Fusion.Models.Api20190901Preview.IMigration MigrationBody { get => this._migrationBody; set => this._migrationBody = value; }

        /// <summary>The overwrite policy for migration Clobber|SkipIfSizeMatch|SkipIfDateIsEarlier</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The overwrite policy for migration Clobber|SkipIfSizeMatch|SkipIfDateIsEarlier")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The overwrite policy for migration Clobber|SkipIfSizeMatch|SkipIfDateIsEarlier",
        SerializedName = @"overwritePolicy",
        PossibleTypes = new [] { typeof(Wandisco.Fusion.Support.LiveMigrationOverwritePolicy) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Wandisco.Fusion.Support.LiveMigrationOverwritePolicy))]
        public Wandisco.Fusion.Support.LiveMigrationOverwritePolicy OverwritePolicy { get => MigrationBody.OverwritePolicy ?? ((Wandisco.Fusion.Support.LiveMigrationOverwritePolicy)""); set => MigrationBody.OverwritePolicy = value; }

        /// <summary>
        /// The instance of the <see cref="Wandisco.Fusion.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Wandisco.Fusion.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>Number of bytes excluded</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of bytes excluded")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of bytes excluded",
        SerializedName = @"bytesExcluded",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressBytesExcluded { get => MigrationBody.ProgressBytesExcluded ?? default(long); set => MigrationBody.ProgressBytesExcluded = value; }

        /// <summary>Number of bytes to migrate</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of bytes to migrate")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of bytes to migrate",
        SerializedName = @"bytesToMigrate",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressBytesToMigrate { get => MigrationBody.ProgressBytesToMigrate ?? default(long); set => MigrationBody.ProgressBytesToMigrate = value; }

        /// <summary>Number of excluded directories</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of excluded directories")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of excluded directories",
        SerializedName = @"dirsExcluded",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressDirsExcluded { get => MigrationBody.ProgressDirsExcluded ?? default(long); set => MigrationBody.ProgressDirsExcluded = value; }

        /// <summary>Number of directories scanned</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of directories scanned")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of directories scanned",
        SerializedName = @"dirsSeen",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressDirsSeen { get => MigrationBody.ProgressDirsSeen ?? default(long); set => MigrationBody.ProgressDirsSeen = value; }

        /// <summary>Number of directories to migrate</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of directories to migrate")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of directories to migrate",
        SerializedName = @"dirsToMigrate",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressDirsToMigrate { get => MigrationBody.ProgressDirsToMigrate ?? default(long); set => MigrationBody.ProgressDirsToMigrate = value; }

        /// <summary>Duration of migration</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Duration of migration")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Duration of migration",
        SerializedName = @"duration",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressDuration { get => MigrationBody.ProgressDuration ?? default(long); set => MigrationBody.ProgressDuration = value; }

        /// <summary>Number of excluded files</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of excluded files")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of excluded files",
        SerializedName = @"filesExcluded",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressFilesExcluded { get => MigrationBody.ProgressFilesExcluded ?? default(long); set => MigrationBody.ProgressFilesExcluded = value; }

        /// <summary>Number of files scanned</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of files scanned")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of files scanned",
        SerializedName = @"filesSeen",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressFilesSeen { get => MigrationBody.ProgressFilesSeen ?? default(long); set => MigrationBody.ProgressFilesSeen = value; }

        /// <summary>Number of files to migrate</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of files to migrate")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of files to migrate",
        SerializedName = @"filesToMigrate",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressFilesToMigrate { get => MigrationBody.ProgressFilesToMigrate ?? default(long); set => MigrationBody.ProgressFilesToMigrate = value; }

        /// <summary>Size of the migration</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Size of the migration")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Size of the migration",
        SerializedName = @"sizeOfMigration",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressSizeOfMigration { get => MigrationBody.ProgressSizeOfMigration ?? default(long); set => MigrationBody.ProgressSizeOfMigration = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>The source zone for replication rule</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The source zone for replication rule")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The source zone for replication rule",
        SerializedName = @"source",
        PossibleTypes = new [] { typeof(string) })]
        public string Source { get => MigrationBody.Source ?? null; set => MigrationBody.Source = value; }

        /// <summary>Running state of the migration</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Running state of the migration")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Running state of the migration",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(Wandisco.Fusion.Support.LiveMigrationState) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Wandisco.Fusion.Support.LiveMigrationState))]
        public Wandisco.Fusion.Support.LiveMigrationState State { get => MigrationBody.State ?? ((Wandisco.Fusion.Support.LiveMigrationState)""); set => MigrationBody.State = value; }

        /// <summary>The target zone for replication rule</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The target zone for replication rule")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The target zone for replication rule",
        SerializedName = @"target",
        PossibleTypes = new [] { typeof(string) })]
        public string Target { get => MigrationBody.Target ?? null; set => MigrationBody.Target = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Wandisco.Fusion.Models.Api20190901Preview.IErrorResponse" /> from
        /// the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Wandisco.Fusion.Models.Api20190901Preview.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Wandisco.Fusion.Models.Api20190901Preview.IMigration" /> from the
        /// remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Wandisco.Fusion.Models.Api20190901Preview.IMigration> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Wandisco.Fusion.Runtime.AttachDebugger.Break();
            }
            ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Wandisco.Fusion.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletEndProcessing).Wait(); if( ((Wandisco.Fusion.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Wandisco.Fusion.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Wandisco.Fusion.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Wandisco.Fusion.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Wandisco.Fusion.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Wandisco.Fusion.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data, new[] { data.Message });
                        return ;
                    }
                    case Wandisco.Fusion.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Wandisco.Fusion.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Wandisco.Fusion.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            try
            {
                // work
                if (ShouldProcess($"Call remote 'MigrationsCreateOrUpdate' operation"))
                {
                    using( var asyncCommandRuntime = new Wandisco.Fusion.Runtime.PowerShell.AsyncCommandRuntime(this, ((Wandisco.Fusion.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Wandisco.Fusion.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Wandisco.Fusion.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Wandisco.Fusion.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletProcessRecordAsyncStart); if( ((Wandisco.Fusion.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                await ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletGetPipeline); if( ((Wandisco.Fusion.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Wandisco.Fusion.Module.Instance.CreatePipeline(InvocationInformation, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Wandisco.Fusion.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Wandisco.Fusion.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletBeforeAPICall); if( ((Wandisco.Fusion.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // try to call with PATH parameters from Input Object
                    if (null == InputObject.ResourceGroupName)
                    {
                        ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.ResourceGroupName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                    }
                    if (null == InputObject.SubscriptionId)
                    {
                        ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.SubscriptionId"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                    }
                    if (null == InputObject.FusionGroupName)
                    {
                        ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.FusionGroupName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                    }
                    if (null == InputObject.ReplicationRuleName)
                    {
                        ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.ReplicationRuleName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                    }
                    if (null == InputObject.MigrationName)
                    {
                        ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.MigrationName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                    }
                    await this.Client.MigrationsCreateOrUpdate(InputObject.ResourceGroupName ?? null, InputObject.SubscriptionId ?? null, InputObject.FusionGroupName ?? null, InputObject.ReplicationRuleName ?? null, InputObject.MigrationName ?? null, MigrationBody, onOk, onDefault, this, Pipeline);
                    await ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletAfterAPICall); if( ((Wandisco.Fusion.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Wandisco.Fusion.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  body=MigrationBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="SetMigration_UpdateViaIdentityExpanded" /> cmdlet class.
        /// </summary>
        public SetMigration_UpdateViaIdentityExpanded()
        {

        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Wandisco.Fusion.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Wandisco.Fusion.Models.Api20190901Preview.IErrorResponse" /> from
        /// the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Wandisco.Fusion.Models.Api20190901Preview.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Wandisco.Fusion.Runtime.RestException<Wandisco.Fusion.Models.Api20190901Preview.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { body=MigrationBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { body=MigrationBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Wandisco.Fusion.Models.Api20190901Preview.IMigration" /> from the
        /// remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Wandisco.Fusion.Models.Api20190901Preview.IMigration> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Wandisco.Fusion.Models.Api20190901Preview.IMigration
                WriteObject((await response));
            }
        }
    }
}