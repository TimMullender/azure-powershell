// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6282, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Wandisco.Fusion.Cmdlets
{
    using static Wandisco.Fusion.Runtime.Extensions;

    /// <summary>Create or update a replicationRule</summary>
    /// <remarks>
    /// [OpenAPI] ReplicationRules_CreateOrUpdate=>PUT:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Wandisco.Fusion/fusionGroups/{fusionGroupName}/replicationRules/{replicationRuleName}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"ReplicationRule_CreateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Wandisco.Fusion.Models.Api20190901Preview.IReplicationRule))]
    [global::Wandisco.Fusion.Description(@"Create or update a replicationRule")]
    [global::Wandisco.Fusion.Generated]
    public partial class NewReplicationRule_CreateExpanded : global::System.Management.Automation.PSCmdlet,
        Wandisco.Fusion.Runtime.IEventListener
    {
        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>when specified, runs this cmdlet as a PowerShell job</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command as a job")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter AsJob { get; set; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Wandisco.Fusion.WanDiscoFusion Client => Wandisco.Fusion.Module.Instance.ClientAPI;

        /// <summary>
        /// Date after which migration should occur. Required if overwritePolicy is SkipIfDateIsEarlier.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Date after which migration should occur. Required if overwritePolicy is SkipIfDateIsEarlier.")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Date after which migration should occur. Required if overwritePolicy is SkipIfDateIsEarlier.",
        SerializedName = @"dateAfterWhichToMigrate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime DateAfterWhichToMigrate { get => ReplicationRuleBody.DateAfterWhichToMigrate ?? default(global::System.DateTime); set => ReplicationRuleBody.DateAfterWhichToMigrate = value; }

        /// <summary>Backing field for <see cref="FusionGroupName" /> property.</summary>
        private string _fusionGroupName;

        /// <summary>The name of the fusionGroup resource.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the fusionGroup resource.")]
        [Wandisco.Fusion.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the fusionGroup resource.",
        SerializedName = @"fusionGroupName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Path)]
        public string FusionGroupName { get => this._fusionGroupName; set => this._fusionGroupName = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Runtime)]
        public Wandisco.Fusion.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Runtime)]
        public Wandisco.Fusion.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>Location of the resource.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Location of the resource.")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Location of the resource.",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        public string Location { get => ReplicationRuleBody.Location ?? null; set => ReplicationRuleBody.Location = value; }

        /// <summary>
        /// <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Wandisco.Fusion.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Wandisco.Fusion.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// when specified, will make the remote call, and return an AsyncOperationResponse, letting the remote operation continue
        /// asynchronously.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command asynchronously")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter NoWait { get; set; }

        /// <summary>The overwrite policy for migration Clobber|SkipIfSizeMatch|SkipIfDateIsEarlier</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The overwrite policy for migration Clobber|SkipIfSizeMatch|SkipIfDateIsEarlier")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The overwrite policy for migration Clobber|SkipIfSizeMatch|SkipIfDateIsEarlier",
        SerializedName = @"overwritePolicy",
        PossibleTypes = new [] { typeof(Wandisco.Fusion.Support.LiveMigrationOverwritePolicy) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Wandisco.Fusion.Support.LiveMigrationOverwritePolicy))]
        public Wandisco.Fusion.Support.LiveMigrationOverwritePolicy OverwritePolicy { get => ReplicationRuleBody.OverwritePolicy ?? ((Wandisco.Fusion.Support.LiveMigrationOverwritePolicy)""); set => ReplicationRuleBody.OverwritePolicy = value; }

        /// <summary>
        /// The Filesystem Path to be used if a PathMapping is not defined for a certain zone.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Filesystem Path to be used if a PathMapping is not defined for a certain zone.")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Filesystem Path to be used if a PathMapping is not defined for a certain zone.",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        public string Path { get => ReplicationRuleBody.Path ?? null; set => ReplicationRuleBody.Path = value; }

        /// <summary>Path Mapping for a Replication Rule</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Path Mapping for a Replication Rule")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Path Mapping for a Replication Rule",
        SerializedName = @"pathMapping",
        PossibleTypes = new [] { typeof(Wandisco.Fusion.Models.Api20190901Preview.IPathMapping) })]
        public Wandisco.Fusion.Models.Api20190901Preview.IPathMapping[] PathMapping { get => ReplicationRuleBody.PathMapping ?? null /* arrayOf */; set => ReplicationRuleBody.PathMapping = value; }

        /// <summary>
        /// The instance of the <see cref="Wandisco.Fusion.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Wandisco.Fusion.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>
        /// The Zone that takes precedence for a quorum in a scenario where there is an even number of zones and an equivalent amount
        /// of nodes are down in each zone
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The Zone that takes precedence for a quorum in a scenario where there is an even number of zones and an equivalent amount of nodes are down in each zone")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Zone that takes precedence for a quorum in a scenario where there is an even number of zones and an equivalent amount of nodes are down in each zone",
        SerializedName = @"priorityZone",
        PossibleTypes = new [] { typeof(string) })]
        public string PriorityZone { get => ReplicationRuleBody.PriorityZone ?? null; set => ReplicationRuleBody.PriorityZone = value; }

        /// <summary>Number of bytes excluded</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of bytes excluded")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of bytes excluded",
        SerializedName = @"bytesExcluded",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressBytesExcluded { get => ReplicationRuleBody.ProgressBytesExcluded ?? default(long); set => ReplicationRuleBody.ProgressBytesExcluded = value; }

        /// <summary>Number of bytes to migrate</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of bytes to migrate")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of bytes to migrate",
        SerializedName = @"bytesToMigrate",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressBytesToMigrate { get => ReplicationRuleBody.ProgressBytesToMigrate ?? default(long); set => ReplicationRuleBody.ProgressBytesToMigrate = value; }

        /// <summary>Number of excluded directories</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of excluded directories")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of excluded directories",
        SerializedName = @"dirsExcluded",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressDirsExcluded { get => ReplicationRuleBody.ProgressDirsExcluded ?? default(long); set => ReplicationRuleBody.ProgressDirsExcluded = value; }

        /// <summary>Number of directories scanned</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of directories scanned")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of directories scanned",
        SerializedName = @"dirsSeen",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressDirsSeen { get => ReplicationRuleBody.ProgressDirsSeen ?? default(long); set => ReplicationRuleBody.ProgressDirsSeen = value; }

        /// <summary>Number of directories to migrate</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of directories to migrate")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of directories to migrate",
        SerializedName = @"dirsToMigrate",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressDirsToMigrate { get => ReplicationRuleBody.ProgressDirsToMigrate ?? default(long); set => ReplicationRuleBody.ProgressDirsToMigrate = value; }

        /// <summary>Duration of migration</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Duration of migration")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Duration of migration",
        SerializedName = @"duration",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressDuration { get => ReplicationRuleBody.ProgressDuration ?? default(long); set => ReplicationRuleBody.ProgressDuration = value; }

        /// <summary>Number of excluded files</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of excluded files")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of excluded files",
        SerializedName = @"filesExcluded",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressFilesExcluded { get => ReplicationRuleBody.ProgressFilesExcluded ?? default(long); set => ReplicationRuleBody.ProgressFilesExcluded = value; }

        /// <summary>Number of files scanned</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of files scanned")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of files scanned",
        SerializedName = @"filesSeen",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressFilesSeen { get => ReplicationRuleBody.ProgressFilesSeen ?? default(long); set => ReplicationRuleBody.ProgressFilesSeen = value; }

        /// <summary>Number of files to migrate</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of files to migrate")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of files to migrate",
        SerializedName = @"filesToMigrate",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressFilesToMigrate { get => ReplicationRuleBody.ProgressFilesToMigrate ?? default(long); set => ReplicationRuleBody.ProgressFilesToMigrate = value; }

        /// <summary>Size of the migration</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Size of the migration")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Size of the migration",
        SerializedName = @"sizeOfMigration",
        PossibleTypes = new [] { typeof(long) })]
        public long ProgressSizeOfMigration { get => ReplicationRuleBody.ProgressSizeOfMigration ?? default(long); set => ReplicationRuleBody.ProgressSizeOfMigration = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>
        /// The number of inconsistent files if the result of the consistency check is inconsistent
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The number of inconsistent files if the result of the consistency check is inconsistent")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The number of inconsistent files if the result of the consistency check is inconsistent",
        SerializedName = @"inconsistencyCount",
        PossibleTypes = new [] { typeof(long) })]
        public long RecentConsistencyReportInconsistencyCount { get => ReplicationRuleBody.RecentConsistencyReportInconsistencyCount ?? default(long); set => ReplicationRuleBody.RecentConsistencyReportInconsistencyCount = value; }

        /// <summary>The timestamp from when this consistency check was completed</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The timestamp from when this consistency check was completed")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The timestamp from when this consistency check was completed",
        SerializedName = @"lastCheck",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime RecentConsistencyReportLastCheck { get => ReplicationRuleBody.RecentConsistencyReportLastCheck ?? default(global::System.DateTime); set => ReplicationRuleBody.RecentConsistencyReportLastCheck = value; }

        /// <summary>The result of the most recent consistency check available for this path</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The result of the most recent consistency check available for this path")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The result of the most recent consistency check available for this path",
        SerializedName = @"result",
        PossibleTypes = new [] { typeof(Wandisco.Fusion.Support.ConsistencyResult) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Wandisco.Fusion.Support.ConsistencyResult))]
        public Wandisco.Fusion.Support.ConsistencyResult RecentConsistencyReportResult { get => ReplicationRuleBody.RecentConsistencyReportResult ?? ((Wandisco.Fusion.Support.ConsistencyResult)""); set => ReplicationRuleBody.RecentConsistencyReportResult = value; }

        /// <summary>Backing field for <see cref="ReplicationRuleBody" /> property.</summary>
        private Wandisco.Fusion.Models.Api20190901Preview.IReplicationRule _replicationRuleBody= new Wandisco.Fusion.Models.Api20190901Preview.ReplicationRule();

        /// <summary>Replication Rule</summary>
        private Wandisco.Fusion.Models.Api20190901Preview.IReplicationRule ReplicationRuleBody { get => this._replicationRuleBody; set => this._replicationRuleBody = value; }

        /// <summary>Backing field for <see cref="ReplicationRuleName" /> property.</summary>
        private string _replicationRuleName;

        /// <summary>The name of the replicationRule</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the replicationRule")]
        [Wandisco.Fusion.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the replicationRule",
        SerializedName = @"replicationRuleName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Path)]
        public string ReplicationRuleName { get => this._replicationRuleName; set => this._replicationRuleName = value; }

        /// <summary>Backing field for <see cref="ResourceGroupName" /> property.</summary>
        private string _resourceGroupName;

        /// <summary>The name of the resource group.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the resource group.")]
        [Wandisco.Fusion.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the resource group.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Path)]
        public string ResourceGroupName { get => this._resourceGroupName; set => this._resourceGroupName = value; }

        /// <summary>The source zone for replication rule</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The source zone for replication rule")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The source zone for replication rule",
        SerializedName = @"source",
        PossibleTypes = new [] { typeof(string) })]
        public string Source { get => ReplicationRuleBody.Source ?? null; set => ReplicationRuleBody.Source = value; }

        /// <summary>Running state of the migration</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Running state of the migration")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Running state of the migration",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(Wandisco.Fusion.Support.LiveMigrationState) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Wandisco.Fusion.Support.LiveMigrationState))]
        public Wandisco.Fusion.Support.LiveMigrationState State { get => ReplicationRuleBody.State ?? ((Wandisco.Fusion.Support.LiveMigrationState)""); set => ReplicationRuleBody.State = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>The Azure subscription ID.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The Azure subscription ID.")]
        [Wandisco.Fusion.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The Azure subscription ID.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Path)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>resource tags.</summary>
        [global::Wandisco.Fusion.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "resource tags.")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"resource tags.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Wandisco.Fusion.Models.Api20190901Preview.IResourceTags) })]
        public Wandisco.Fusion.Models.Api20190901Preview.IResourceTags Tags { get => ReplicationRuleBody.Tags ?? null /* object */; set => ReplicationRuleBody.Tags = value; }

        /// <summary>The target zone for replication rule</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The target zone for replication rule")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The target zone for replication rule",
        SerializedName = @"target",
        PossibleTypes = new [] { typeof(string) })]
        public string Target { get => ReplicationRuleBody.Target ?? null; set => ReplicationRuleBody.Target = value; }

        /// <summary>The list of zones the replication rule applies to.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of zones the replication rule applies to.")]
        [global::Wandisco.Fusion.Category(global::Wandisco.Fusion.ParameterCategory.Body)]
        [Wandisco.Fusion.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of zones the replication rule applies to.",
        SerializedName = @"zoneNames",
        PossibleTypes = new [] { typeof(string) })]
        public string[] ZoneNames { get => ReplicationRuleBody.ZoneNames ?? null /* arrayOf */; set => ReplicationRuleBody.ZoneNames = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Wandisco.Fusion.Models.Api20190901Preview.IErrorResponse" /> from
        /// the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Wandisco.Fusion.Models.Api20190901Preview.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Wandisco.Fusion.Models.Api20190901Preview.IReplicationRule" />
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Wandisco.Fusion.Models.Api20190901Preview.IReplicationRule> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Wandisco.Fusion.Runtime.AttachDebugger.Break();
            }
            ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Wandisco.Fusion.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Creates a duplicate instance of this cmdlet (via JSON serialization).</summary>
        /// <returns>a duplicate instance of NewReplicationRule_CreateExpanded</returns>
        public Wandisco.Fusion.Cmdlets.NewReplicationRule_CreateExpanded Clone()
        {
            var clone = new NewReplicationRule_CreateExpanded();
            clone.InvocationInformation = this.InvocationInformation;
            clone.Proxy = this.Proxy;
            clone.Pipeline = this.Pipeline;
            clone.AsJob = this.AsJob;
            clone.Break = this.Break;
            clone.ProxyCredential = this.ProxyCredential;
            clone.ProxyUseDefaultCredentials = this.ProxyUseDefaultCredentials;
            clone.HttpPipelinePrepend = this.HttpPipelinePrepend;
            clone.HttpPipelineAppend = this.HttpPipelineAppend;
            clone.ReplicationRuleBody = this.ReplicationRuleBody;
            clone.SubscriptionId = this.SubscriptionId;
            clone.ResourceGroupName = this.ResourceGroupName;
            clone.FusionGroupName = this.FusionGroupName;
            clone.ReplicationRuleName = this.ReplicationRuleName;
            return clone;
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletEndProcessing).Wait(); if( ((Wandisco.Fusion.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Wandisco.Fusion.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Wandisco.Fusion.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Wandisco.Fusion.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Wandisco.Fusion.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Wandisco.Fusion.Runtime.Events.Information:
                    {
                        // When an operation supports asjob, Information messages must go thru verbose.
                        WriteVerbose($"INFORMATION: {(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Wandisco.Fusion.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Wandisco.Fusion.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Wandisco.Fusion.Runtime.Events.DelayBeforePolling:
                    {
                        if (true == MyInvocation?.BoundParameters?.ContainsKey("NoWait"))
                        {
                            var data = messageData();
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                var asyncOperation = response.GetFirstHeader(@"Azure-AsyncOperation");
                                var location = response.GetFirstHeader(@"Location");
                                var uri = global::System.String.IsNullOrEmpty(asyncOperation) ? global::System.String.IsNullOrEmpty(location) ? response.RequestMessage.RequestUri.AbsoluteUri : location : asyncOperation;
                                WriteObject(new Wandisco.Fusion.Runtime.PowerShell.AsyncOperationResponse { Target = uri });
                                // do nothing more.
                                data.Cancel();
                                return;
                            }
                        }
                        break;
                    }
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="NewReplicationRule_CreateExpanded" /> cmdlet class.
        /// </summary>
        public NewReplicationRule_CreateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Wandisco.Fusion.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            try
            {
                // work
                if (ShouldProcess($"Call remote 'ReplicationRulesCreateOrUpdate' operation"))
                {
                    if (true == MyInvocation?.BoundParameters?.ContainsKey("AsJob"))
                    {
                        var instance = this.Clone();
                        var job = new Wandisco.Fusion.Runtime.PowerShell.AsyncJob(instance, this.MyInvocation.Line, this.MyInvocation.MyCommand.Name, this._cancellationTokenSource.Token, this._cancellationTokenSource.Cancel);
                        JobRepository.Add(job);
                        var task = instance.ProcessRecordAsync();
                        job.Monitor(task);
                        WriteObject(job);
                    }
                    else
                    {
                        using( var asyncCommandRuntime = new Wandisco.Fusion.Runtime.PowerShell.AsyncCommandRuntime(this, ((Wandisco.Fusion.Runtime.IEventListener)this).Token) )
                        {
                            asyncCommandRuntime.Wait( ProcessRecordAsync(),((Wandisco.Fusion.Runtime.IEventListener)this).Token);
                        }
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Wandisco.Fusion.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Wandisco.Fusion.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletProcessRecordAsyncStart); if( ((Wandisco.Fusion.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                await ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletGetPipeline); if( ((Wandisco.Fusion.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Wandisco.Fusion.Module.Instance.CreatePipeline(InvocationInformation, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Wandisco.Fusion.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Wandisco.Fusion.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletBeforeAPICall); if( ((Wandisco.Fusion.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.ReplicationRulesCreateOrUpdate(SubscriptionId, ResourceGroupName, FusionGroupName, ReplicationRuleName, ReplicationRuleBody, onOk, onDefault, this, Pipeline);
                    await ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletAfterAPICall); if( ((Wandisco.Fusion.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Wandisco.Fusion.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  SubscriptionId=SubscriptionId,ResourceGroupName=ResourceGroupName,FusionGroupName=FusionGroupName,ReplicationRuleName=ReplicationRuleName,body=ReplicationRuleBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Wandisco.Fusion.Runtime.IEventListener)this).Signal(Wandisco.Fusion.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Wandisco.Fusion.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Wandisco.Fusion.Models.Api20190901Preview.IErrorResponse" /> from
        /// the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Wandisco.Fusion.Models.Api20190901Preview.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Wandisco.Fusion.Runtime.RestException<Wandisco.Fusion.Models.Api20190901Preview.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, FusionGroupName=FusionGroupName, ReplicationRuleName=ReplicationRuleName, body=ReplicationRuleBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, FusionGroupName=FusionGroupName, ReplicationRuleName=ReplicationRuleName, body=ReplicationRuleBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Wandisco.Fusion.Models.Api20190901Preview.IReplicationRule" />
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Wandisco.Fusion.Models.Api20190901Preview.IReplicationRule> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Wandisco.Fusion.Models.Api20190901Preview.IReplicationRule
                WriteObject((await response));
            }
        }
    }
}