// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6246, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Sample.API.Models
{
    using static Sample.API.Runtime.Extensions;

    /// <summary>Consistency Check Options Properties</summary>
    public partial class ConsistencyCheckOptionsProperties :
        Sample.API.Models.IConsistencyCheckOptionsProperties,
        Sample.API.Models.IConsistencyCheckOptionsPropertiesInternal
    {

        /// <summary>Backing field for <see cref="NonBlockingThreshold" /> property.</summary>
        private int? _nonBlockingThreshold;

        /// <summary>
        /// The threshold of dirty files which will cancel a non-blocking consistency check should it be met
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? NonBlockingThreshold { get => this._nonBlockingThreshold; set => this._nonBlockingThreshold = value; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private Sample.API.Support.Type? _type;

        /// <summary>The type of check, blocking will prevent client requests while running</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public Sample.API.Support.Type? Type { get => this._type; set => this._type = value; }

        /// <summary>Creates an new <see cref="ConsistencyCheckOptionsProperties" /> instance.</summary>
        public ConsistencyCheckOptionsProperties()
        {

        }
    }
    /// Consistency Check Options Properties
    public partial interface IConsistencyCheckOptionsProperties :
        Sample.API.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The threshold of dirty files which will cancel a non-blocking consistency check should it be met
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The threshold of dirty files which will cancel a non-blocking consistency check should it be met",
        SerializedName = @"nonBlockingThreshold",
        PossibleTypes = new [] { typeof(int) })]
        int? NonBlockingThreshold { get; set; }
        /// <summary>The type of check, blocking will prevent client requests while running</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of check, blocking will prevent client requests while running",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Sample.API.Support.Type) })]
        Sample.API.Support.Type? Type { get; set; }

    }
    /// Consistency Check Options Properties
    internal partial interface IConsistencyCheckOptionsPropertiesInternal

    {
        /// <summary>
        /// The threshold of dirty files which will cancel a non-blocking consistency check should it be met
        /// </summary>
        int? NonBlockingThreshold { get; set; }
        /// <summary>The type of check, blocking will prevent client requests while running</summary>
        Sample.API.Support.Type? Type { get; set; }

    }
}